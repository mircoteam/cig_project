#!/usr/bin/env python
import os,django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "server.settings")
django.setup()
import pika
from server.models import *
from mrm.models import *
from pika import credentials as pika_credentials
from mrm.utility import convertdicttoentity
credentials = pika_credentials.PlainCredentials('mkit','mkit')
connection = pika.BlockingConnection(pika.ConnectionParameters(host='172.16.8.104 

',port='5672',
        virtual_host='/cig_mq',credentials=credentials))
queue_name = 'mkit_test_queue'
channel = connection.channel()
channel.basic_qos(prefetch_count=1)

print(' [*] Waiting for logs. To exit press CTRL+C')


def callback(ch, method, properties, body):
    data = json.loads(body)
    # 业务处理代码
    ch.basic_ack(delivery_tag=method.delivery_tag)
    print(" [x] %r" % body)
channel.basic_consume(callback,
                      queue=queue_name,
                      no_ack=False)

channel.start_consuming()



#--------------------------------------------------------------
以上代码需要注意两点
1、消息消费端，每次处理1条消息
channel.basic_qos(prefetch_count=1)
2、需要手工响应rabbitMQ消息处理完成。主要防止消息消费时，服务down机，导致消息未被成功消费。
业务代码也需要做幂等处理（同一条消息，被消费多次结果是一样的）

no_ack=False
手机响应RabbitMQ,处理完成，若未响应，服务器端相应的消息不会被删除
ch.basic_ack(delivery_tag=method.delivery_tag)
